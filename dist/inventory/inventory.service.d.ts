import { InventoryTransferRequest } from './entities/requests.entity';
import { MongoRepository } from 'typeorm';
import { Bin } from './entities/bin.entity';
import { Inventory } from './entities/inventory.entity';
import { Lot } from './entities/lot.entity';
import { StockEntry } from './entities/stock-entry.entity';
import { Warehouse } from './entities/warehouse.entity';
import { User } from '../users/user.entity';
export declare class InventoryService {
    private readonly inventoryRepository;
    private readonly stockEntryRepository;
    private readonly lotRepository;
    private readonly treeRepository;
    private readonly warehouseRepository;
    private readonly inventoryTransferRequestRepository;
    constructor(inventoryRepository: MongoRepository<Inventory>, stockEntryRepository: MongoRepository<StockEntry>, lotRepository: MongoRepository<Lot>, treeRepository: MongoRepository<Bin>, warehouseRepository: MongoRepository<Warehouse>, inventoryTransferRequestRepository: MongoRepository<InventoryTransferRequest>);
    findAllInventory(user: any): Promise<Inventory[]>;
    findOneInventory(id: string): Promise<Inventory>;
    findInventoryByCode(code: string): Promise<Inventory>;
    findInventoryByItemCode(itemCode: string): Promise<Inventory>;
    findInventoryByItemId(itemId: string): Promise<Inventory>;
    findInventoryByItemAndWarehouse(itemId: string, warehouseId: string): Promise<Inventory>;
    findInventoryByWarehouse(warehouseId: string): Promise<Inventory[]>;
    saveInventory(inventory: Inventory): Promise<Inventory>;
    deleteInventory(id: string): Promise<void>;
    updateInventory(id: string, inventory: any): Promise<Inventory>;
    findAllStockEntries(user: any): Promise<StockEntry[]>;
    findOneStockEntry(id: string): Promise<StockEntry>;
    findStockEntryByWarehouse(warehouseId: string): Promise<StockEntry[]>;
    findStockEntryByInventory(inventoryId: string): Promise<StockEntry[]>;
    findStockEntryByWarehouseAndItem(warehouseId: string, itemId: string): Promise<StockEntry[]>;
    createStockEntry(stockEntry: StockEntry): Promise<any>;
    deleteStockEntry(id: string): Promise<void>;
    updateStockEntry(id: string, stockEntry: any): Promise<StockEntry>;
    findAllLots(): Promise<Lot[]>;
    findOneLot(id: string): Promise<Lot>;
    findLotsByInventoryAndLot(inventoryId: string, lotId: string): Promise<Lot>;
    saveLot(lot: Lot): Promise<Lot>;
    deleteLot(id: string): Promise<void>;
    updateLot(id: string, lot: any): Promise<Lot>;
    findAllBins(): Promise<Bin[]>;
    findOneBin(id: string): Promise<Bin>;
    findBinsByWarehouseAndBin(warehouseId: string, binId: string): Promise<Bin>;
    saveBin(bin: Bin): Promise<Bin>;
    deleteBin(id: string): Promise<void>;
    updateBin(id: string, bin: any): Promise<Bin>;
    findAllWarehouses(user: any): Promise<Warehouse[]>;
    findOneWarehouse(id: string): Promise<Warehouse>;
    findWarehousesByCode(code: string): Promise<Warehouse>;
    createWarehouse(warehouse: Warehouse): Promise<Warehouse>;
    deleteWarehouse(id: string): Promise<void>;
    updateWarehouse(id: string, warehouse: any): Promise<Warehouse>;
    getAllWarehousesForTerritory(territoryId: string): Promise<Warehouse[]>;
    getInventoryForWarehouses(warehouseIds: string[]): Promise<Inventory[]>;
    findAllInventoryTransferRequests(user: any): Promise<InventoryTransferRequest[]>;
    findOneInventoryTransferRequest(id: string): Promise<InventoryTransferRequest>;
    findInventoryTransferRequestByInventory(inventoryId: string): Promise<InventoryTransferRequest[]>;
    findInventoryTransferRequestByWarehouseAndItem(warehouseId: string, itemId: string): Promise<InventoryTransferRequest>;
    findInventoryTransferRequestByWarehouse(warehouseId: string): Promise<InventoryTransferRequest[]>;
    createInventoryTransferRequest(inventoryTransferRequest: InventoryTransferRequest): Promise<InventoryTransferRequest>;
    deleteInventoryTransferRequest(id: string): Promise<void>;
    updateInventoryTransferRequest(id: string, inventoryTransferRequest: InventoryTransferRequest): Promise<InventoryTransferRequest>;
    completeInventoryTransferRequest(id: string, user: User): Promise<any>;
    uploadDailyInventory(file: any, user: User): Promise<{}>;
    resetInventory(file: any, user: User): Promise<string>;
    getDashDataUSM(user: User): Promise<{
        hub_id: string;
        type: string;
        current_inventory: number;
        buffer_stock: number;
        latest_stock_in_quantity: number;
        day_since_stock_in_done: number;
        latest_stock_out_quantity: number;
        day_since_stock_out_done: number;
        today_consumption: number;
        weekly_avg_consumption: number;
    }[]>;
}
