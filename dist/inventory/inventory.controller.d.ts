import { Lot } from './entities/lot.entity';
import { InventoryService } from './inventory.service';
import { Warehouse } from './entities/warehouse.entity';
import { InventoryTransferRequest } from './entities/requests.entity';
import { StockEntry } from './entities/stock-entry.entity';
import { Inventory } from './entities/inventory.entity';
export declare class InventoryController {
    private readonly inventoryService;
    constructor(inventoryService: InventoryService);
    findAllInventory(req: any): Promise<any>;
    findOne(id: string): Promise<any>;
    findByCode(code: string): Promise<any>;
    findByItemCode(itemCode: string): Promise<any>;
    findByItemId(itemId: string): Promise<any>;
    findByItemAndWarehouse(itemId: string, warehouseId: string): Promise<any>;
    findInventoryByWarehouse(warehouseId: string): Promise<any>;
    createInventory(inventory: Inventory): Promise<any>;
    updateInventory(id: string, inventory: Inventory): Promise<any>;
    findAllStockEntries(req: any): Promise<any>;
    findOneStockEntry(id: string): Promise<any>;
    findStockEntryByInventory(inventoryId: string): Promise<any>;
    findStockEntryByWarehouse(warehouseId: string): Promise<any>;
    findStockEntryByWarehouseAndItem(warehouseId: string, itemId: string): Promise<any>;
    createStockEntry(stockEntry: StockEntry): Promise<any>;
    updateStockEntry(id: string, stockEntry: StockEntry): Promise<any>;
    findAllLots(): Promise<any>;
    findOneLot(id: string): Promise<any>;
    createLot(createLotDto: Lot): Promise<any>;
    updateLot(id: string, updateLotDto: Lot): Promise<any>;
    findAllInventoryTransferRequests(req: any): Promise<any>;
    findOneInventoryTransferRequest(id: string): Promise<any>;
    findInventoryTransferRequestByInventory(inventoryId: string): Promise<any>;
    findByInventoryTransferRequestByWarehouse(warehouseId: string): Promise<any>;
    findInventoryTransferRequestByWarehouse(warehouseId: string, itemId: string): Promise<any>;
    createInventoryTransferRequest(inventoryTranserRequest: InventoryTransferRequest, req: any): Promise<any>;
    deleteInventoryTransferRequest(id: string): Promise<any>;
    updateInventoryTransferRequest(id: string, inventoryTranserRequest: InventoryTransferRequest): Promise<any>;
    completeInventoryTransferRequest(id: string, req: any): Promise<any>;
    findAllWarehouses(req: any): Promise<any>;
    findOneWarehouse(id: string): Promise<any>;
    createWarehouse(warehouse: Warehouse): Promise<any>;
    updateWarehouse(id: string, warehouse: Warehouse): Promise<any>;
    deleteWarehouse(id: string): Promise<any>;
    uploadDailyInventory(file: any, req: any): Promise<{}>;
    resetInventory(file: any, req: any): Promise<string>;
    getDashDataUSM(req: any): Promise<{
        hub_id: string;
        type: string;
        current_inventory: number;
        buffer_stock: number;
        latest_stock_in_quantity: number;
        day_since_stock_in_done: number;
        latest_stock_out_quantity: number;
        day_since_stock_out_done: number;
        today_consumption: number;
        weekly_avg_consumption: number;
    }[]>;
    getDashDataWarehouse(req: any): Promise<any>;
    cleanData(): Promise<{
        status: string;
        message: string;
    }>;
}
